# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /signIn                     controllers.Application.signIn
GET     /signOut                    controllers.Application.signOut
POST    /authenticate/credentials   controllers.Application.authenticate

# API
GET     /admin/email                controllers.Application.getEmail


# Admin
GET     /api/admin/fakeusers        controllers.AdminApiController.listFakeUsers
POST    /api/admin/fakeuser/add     controllers.AdminApiController.createFakeUser

GET     /api/stats                  controllers.Application.stats
GET     /api/posts                  controllers.PostApiController.fetchPostList(ts: Option[Long] ?= None, filter: Option[String] ?= None)
DELETE  /api/post/:id               controllers.PostApiController.deletePost(id: Long)
DELETE  /api/mark/:id               controllers.PostApiController.deleteMark(id: Long)
POST    /api/post/:id/recommend     controllers.PostApiController.recommendPost(id: Long, status: Boolean ?= false)
DELETE  /api/post/:id/recommend     controllers.PostApiController.recommendPost(id: Long, status: Boolean ?= true)
GET     /api/post/:id/recommend     controllers.PostApiController.isPostRecommended(id: Long)
POST    /api/post/:id/block         controllers.PostApiController.invisiblePost(id: Long, status: Boolean ?= false)
DELETE  /api/post/:id/block         controllers.PostApiController.invisiblePost(id: Long, status: Boolean ?= true)
GET     /api/post/:id/block         controllers.PostApiController.isPostInvisible(id: Long)
GET     /api/post/:tag/count        controllers.PostApiController.countPostLikes(tag: String)
POST    /api/post/:id/mark/:tag/:uid    controllers.PostApiController.addMark(id: Long, tag: String, uid: Long)
POST    /api/mark/:id/:uid          controllers.PostApiController.like(id: Long, uid: Long)
DELETE  /api/mark/:id/:uid          controllers.PostApiController.unlike(id: Long, uid: Long)

GET     /api/brands/:pg             controllers.BrandApiController.fetchBrandList(pg: Int, pageSize: Int ?= 50, filter: String ?= "")
POST    /api/brand/:id/upload       controllers.BrandApiController.uploadBrandImageToQiniu(id: Long)
POST    /api/brand                  controllers.BrandApiController.insertBrand
GET     /api/brand/:id              controllers.BrandApiController.getBrand(id: Long)
POST    /api/brand/:id              controllers.BrandApiController.updateBrand(id: Long)
DELETE  /api/brand/:id              controllers.BrandApiController.deleteBrand(id: Long)
DELETE  /api/brand/:id/promote      controllers.BrandApiController.deletePromoteBrand(id: Long)
POST    /api/brand/:id/promote      controllers.BrandApiController.promoteBrand(id: Long)

GET     /api/users/$pg<[0-9]+>      controllers.UserApiController.fetchUserList(pg: Int, pageSize: Int ?= 50, filter: String ?= "")
GET     /api/users/active           controllers.UserApiController.getActiveUsers(duration: Long ?= 86400)
GET     /api/user/:id/info          controllers.UserApiController.getUserInfo(id: Long)
GET     /api/user/:id/posts         controllers.UserApiController.getUserPosts(id: Long, ts: Option[Long] ?= None)
POST    /api/user/:id/update        controllers.UserApiController.updateUserInfo(id: Long)
DELETE  /api/user/:id/register      controllers.UserApiController.unregisterUser(id: Long)
POST    /api/user/:id/refresh       controllers.UserApiController.refreshUserCache(id: Long)

GET     /api/tag/group/:id          controllers.TagApiController.getTagsForGroup(id: Long, page: Int, size: Int = 500)
GET     /api/tag/groups             controllers.TagApiController.getGroupedTags
POST    /api/tag/:tid/group/:gid    controllers.TagApiController.setTagGroup(tid: Long, gid: Long)
POST    /api/tag/group/:name        controllers.TagApiController.addTagGroup(name: String)

GET     /api/unjudgedposts          controllers.PostApiController.getNotJudgedPosts(start: Option[Long] ?= None)
POST    /api/judge/:id/:judge       controllers.PostApiController.judgePost(id: Long, judge: Long)
GET     /api/feedback/:pg           controllers.FeedbackApiController.getFeedbackList(pg: Int, pageSize: Int = 100)
DELETE  /api/feedback/:id           controllers.FeedbackApiController.deleteFeedback(id: Long)
GET     /api/report/:pg             controllers.FeedbackApiController.getReportList(pg: Int, pageSize: Int = 100)
DELETE  /api/report/:id             controllers.FeedbackApiController.deleteReport(id: Long)

# Yeoman
GET      /                          controllers.YeomanController.index
GET      /*file                     controllers.YeomanController.at(file)


# GET     /recommend/:id            controllers.Application.recommend(id: Long)



# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
GET     /webjars/*file              controllers.WebJarAssets.at(file)
