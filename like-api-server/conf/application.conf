# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="T>3c<eSjU:Z?RW9D;>fgqx`HAAIddZnbDG5e8edV;U5O;F<LRC@N9ELIGEswFYgb"

# The application languages
# ~~~~~
play.i18n.langs=["zh-CN", "en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=app.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

play.modules.enabled += "modules.SilhouetteModule"

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
slick.dbs.default.driver="slick.driver.MySQLDriver$"
slick.dbs.default.db.driver="com.mysql.jdbc.Driver"
slick.dbs.default.db.url="jdbc:mysql://127.0.0.1/like_api"
slick.dbs.default.db.user="root"
slick.dbs.default.db.password=""
//slick.dbs.default.driver="slick.driver.PostgresDriver$"
//slick.dbs.default.db.driver="org.postgresql.Driver"
//slick.dbs.default.db.url="jdbc:postgresql://127.0.0.1/like_api"
//slick.dbs.default.db.user="gguan"
//slick.dbs.default.db.password=""

redis {
  host=localhost
  port=6379
  auth=""
}

memcached {
  host=localhost
  port=11211
  username=""
  password=""
}

qiniu {
  accesskey="3DGp4OIjw1kge550iNYnwgtpqOybc2iS2gzs_moP"
  secretkey="zuexGmLe-VKTCzWZA28gHvBUlbIXI5VZEqIXOXTN"
  accessKey=${?QINIU_ACCESS_KEY}
  secretKey=${?QINIU_SECRET_KEY}
  bucket=like
  cdn="http://cdn.likeorz.com"
}

avoscloud {
  appId="hs3adghcez49m99vmipb3yo227f4cbojf2x9ccfwbfevmtg3"
  appKey="jfzoeaes9ghkmewxqtfooggcd66x87hxs3sjyu25jca6gxfe"
  apiUrl="https://api.leancloud.cn/1.1"
}

jpush {
  secretKey="5a52635ec4366f0317a5172d"
  appKey="1b97372cecb5bcff13515fd5"
}

mob {
  ios {
    appKey="81edd3d46294"
    apiUrl="https://api.sms.mob.com/sms/verify"
  }
  android {
    appKey="a284df6380f0"
    apiUrl="https://web.sms.mob.com/sms/verify"
  }
}

silhouette {
  authenticator {
    headerName="LIKE-SESSION-TOKEN"
    authenticatorExpiry=2592000
  }
}

kamon {

  show-aspectj-missing-warning = false

  metric {
    tick-interval = 5 second
  }

  play {
    include-trace-token-header = false
  }

  system-metrics {
    #sigar is enabled by default
    sigar-enabled = true

    #jmx related metrics are enabled by default
    jmx-enabled = true
  }

  modules {
    kamon-system-metrics.auto-start = false
    kamon-statsd.auto-start = false
    kamon-log-reporter.auto-start = false
  }

  statsd {
    hostname = "127.0.0.1"
    hostname = "192.168.99.100"
    port = 8125
    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 5 second

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    simple-metric-key-generator {

      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      application = "like-api-kamon-statsd"

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = normalize
    }
  }
}


default {
  avatar="default_avatar.jpg"
  cover="default_cover.jpg"
  tokenExpiry=2592000
}

image {
  avatar {
    large=240
    medium=120
    small=80
    origin=1242
  }
  photo {
    large=1242
    medium=620
    small=180
    origin=1242
  }
}

play.akka.actor-system = "like-api-server"

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"

  log-dead-letters = on
  log-dead-letters-during-shutdown = off
  log-config-on-start = off
  jvm-exit-on-fatal-error = on

  actor {
    // Test only!
    serialize-messages = off
    provider = "akka.remote.RemoteActorRefProvider"
  }

  debug {
    receive = off
    autoreceive = off
    lifecycle = off
    fsm = off
    event-stream = off
    unhandled = on
    router-misconfiguration = on
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?API_SERVER_HOSTNAME}
      port = 2550
      port = ${?API_SERVER_PORT}
    }
  }

}

event-receiver {
  address = "127.0.0.1:2551"
  address = ${?REMOTE_ADDRESS}
//  address = "182.92.177.148:2551"
}

tag-blacklist = ["""加(Q|q)\d+""", """(QQ|qq)\d+"""]
tag.illegal-words = ["qq", "微信", "sb", "傻逼", "操你", "阉", "狗逼", "垃圾", "穷屌", "狗日"]

push-actor {
  hostname = "127.0.0.1"
  hostname = ${?PUSH_CLUSTER_HOSTNAME}
  port = 2552
  post = ${?PUSH_CLUSTER_POST}
}

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "com.likeorz.modules.LikeCoreModule"

play.http.filters="app.Filters"
play.http.errorHandler="app.ErrorHandler"

include "silhouette.conf"
